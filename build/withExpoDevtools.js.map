{"version":3,"file":"withExpoDevtools.js","sourceRoot":"","sources":["../src/withExpoDevtools.ts"],"names":[],"mappings":"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","sourcesContent":["import { getDevToolsPluginClientAsync } from 'expo/devtools';\nimport type { StateCreator, StoreApi, StoreMutatorIdentifier } from 'zustand/vanilla';\n\n// Type definitions for DevTools client and messages\ninterface DevToolsClient {\n  sendMessage: (type: string, data: unknown) => void;\n  addMessageListener: (\n    type: string,\n    handler: (message: DevToolsMessage) => void,\n  ) => { remove: () => void };\n}\n\ninterface DevToolsMessage {\n  type: 'ACTION' | 'DISPATCH';\n  payload?: string | { type: string; [key: string]: unknown };\n  state?: string;\n}\n\n// Type definitions for Expo DevTools\ntype Cast<T, U> = T extends U ? T : U;\ntype Write<T, U> = Omit<T, keyof U> & U;\n\ntype TakeTwo<T> = T extends {\n  length: 0;\n}\n  ? [undefined, undefined]\n  : T extends {\n        length: 1;\n      }\n    ? [...args0: Cast<T, unknown[]>, arg1: undefined]\n    : T extends {\n          length: 0 | 1;\n        }\n      ? [...args0: Cast<T, unknown[]>, arg1: undefined]\n      : T extends {\n            length: 2;\n          }\n        ? T\n        : T extends {\n              length: 1 | 2;\n            }\n          ? T\n          : T extends {\n                length: 0 | 1 | 2;\n              }\n            ? T\n            : T extends [infer A0, infer A1, ...unknown[]]\n              ? [A0, A1]\n              : T extends [infer A0, (infer A1)?, ...unknown[]]\n                ? [A0, A1?]\n                : T extends [(infer A0)?, (infer A1)?, ...unknown[]]\n                  ? [A0?, A1?]\n                  : never;\n\ntype WithExpoDevtools<S> = Write<S, StoreExpoDevtools<S>>;\n\ntype Action =\n  | string\n  | {\n      type: string;\n      [x: string | number | symbol]: unknown;\n    };\n\ntype StoreExpoDevtools<S> = S extends {\n  setState: {\n    (...args: infer Sa1): infer Sr1;\n    (...args: infer Sa2): infer Sr2;\n  };\n}\n  ? {\n      setState(...args: [...args: TakeTwo<Sa1>, action?: Action]): Sr1;\n      setState(...args: [...args: TakeTwo<Sa2>, action?: Action]): Sr2;\n      devtools: {\n        cleanup: () => void;\n      };\n    }\n  : never;\n\nexport interface ExpoDevtoolsOptions {\n  name?: string;\n  enabled?: boolean;\n  anonymousActionType?: string;\n  store?: string;\n}\n\ntype ExpoDevtools = <\n  T,\n  Mps extends [StoreMutatorIdentifier, unknown][] = [],\n  Mcs extends [StoreMutatorIdentifier, unknown][] = [],\n  U = T,\n>(\n  initializer: StateCreator<T, [...Mps, ['zustand/expo-devtools', never]], Mcs, U>,\n  devtoolsOptions?: ExpoDevtoolsOptions,\n) => StateCreator<T, Mps, [['zustand/expo-devtools', never], ...Mcs]>;\n\ndeclare module 'zustand/vanilla' {\n  interface StoreMutators<S, A> {\n    'zustand/expo-devtools': WithExpoDevtools<S>;\n  }\n}\n\ntype ExpoDevtoolsImpl = <T>(\n  storeInitializer: StateCreator<T, [], []>,\n  devtoolsOptions?: ExpoDevtoolsOptions,\n) => StateCreator<T, [], []>;\n\nexport type NamedSet<T> = WithExpoDevtools<StoreApi<T>>['setState'];\n\nconst expoDevtoolsImpl: ExpoDevtoolsImpl =\n  (fn, devtoolsOptions = {}) =>\n  (set, get, api) => {\n    const { enabled, anonymousActionType, store, ...options } =\n      devtoolsOptions as ExpoDevtoolsOptions;\n\n    // Check if devtools should be enabled (default to true)\n    const isEnabled = enabled ?? true;\n    if (!isEnabled) {\n      return fn(set, get, api);\n    }\n\n    // State management\n    let isRecording = true;\n    let client: DevToolsClient | null = null;\n\n    // Helper function to safely parse JSON strings\n    const safeJsonParse = (jsonString: string, errorContext: string) => {\n      try {\n        return JSON.parse(jsonString);\n      } catch (e) {\n        console.error(`[zustand devtools] Could not parse ${errorContext}`, e);\n        return null;\n      }\n    };\n\n    // Handle ACTION type messages from devtools\n    const handleActionMessage = (message: DevToolsMessage) => {\n      if (typeof message.payload !== 'string') return;\n\n      const action = safeJsonParse(message.payload, 'action');\n      if (!action) return;\n\n      if (action.type === '__setState') {\n        setStateFromDevtools(action.state);\n        return;\n      }\n\n      const extendedApi = api as StoreApi<unknown> & {\n        dispatchFromDevtools?: boolean;\n        dispatch?: (action: Action) => void;\n      };\n\n      if (extendedApi.dispatchFromDevtools && typeof extendedApi.dispatch === 'function') {\n        extendedApi.dispatch(action);\n      }\n    };\n\n    // Handle DISPATCH type messages from devtools\n    const handleDispatchMessage = (message: DevToolsMessage) => {\n      if (typeof message.payload !== 'object' || !message.payload?.type) return;\n\n      switch (message.payload.type) {\n        case 'RESET':\n          setStateFromDevtools(initialState);\n          sendInit(api.getState());\n          break;\n\n        case 'COMMIT':\n          sendInit(api.getState());\n          break;\n\n        case 'ROLLBACK':\n          if (typeof message.state === 'string') {\n            const state = safeJsonParse(message.state, 'rollback state');\n            if (state) {\n              setStateFromDevtools(state);\n              sendInit(api.getState());\n            }\n          }\n          break;\n\n        case 'JUMP_TO_STATE':\n        case 'JUMP_TO_ACTION':\n          if (typeof message.state === 'string') {\n            const state = safeJsonParse(message.state, 'jump state');\n            if (state) {\n              setStateFromDevtools(state);\n            }\n          }\n          break;\n\n        case 'PAUSE_RECORDING':\n          isRecording = !isRecording;\n          break;\n      }\n    };\n\n    // Initialize the Expo devtools client\n    const initializeClient = async () => {\n      try {\n        client = await getDevToolsPluginClientAsync('zustand-expo-devtools');\n\n        // Set up message listener for devtools actions\n        client.addMessageListener('dispatch', (message: DevToolsMessage) => {\n          switch (message.type) {\n            case 'ACTION':\n              handleActionMessage(message);\n              break;\n            case 'DISPATCH':\n              handleDispatchMessage(message);\n              break;\n          }\n        });\n\n        console.log('[Zustand DevTools] Client initialized');\n      } catch (error) {\n        console.error('[Zustand DevTools] Failed to initialize client:', error);\n      }\n    };\n\n    // Send init message to webui\n    const sendInit = (state: unknown) => {\n      client?.sendMessage('init', {\n        name: options.name || 'Zustand Store',\n        state,\n      });\n    };\n\n    // Send state update to webui\n    const sendStateUpdate = (action: Action, state: unknown) => {\n      if (!isRecording) return;\n\n      const actionObj = typeof action === 'string' ? { type: action } : action;\n\n      client?.sendMessage('state', {\n        type: actionObj.type,\n        state,\n      });\n    };\n\n    // Set state from devtools without triggering recording\n    const setStateFromDevtools = (state: unknown) => {\n      const originalIsRecording = isRecording;\n      isRecording = false;\n      set(state as Parameters<typeof set>[0]);\n      isRecording = originalIsRecording;\n    };\n\n    // Create action object from nameOrAction parameter\n    const createAction = (nameOrAction?: Action): { type: string } => {\n      if (nameOrAction === undefined) {\n        return { type: anonymousActionType || 'anonymous' };\n      }\n\n      if (typeof nameOrAction === 'string') {\n        return { type: nameOrAction };\n      }\n\n      return nameOrAction;\n    };\n\n    // Override setState to capture actions and send to devtools\n    const originalSetState = api.setState;\n    api.setState = (\n      state: Parameters<typeof originalSetState>[0],\n      replace?: boolean,\n      nameOrAction?: Action,\n    ) => {\n      const result = replace === true ? originalSetState(state, true) : originalSetState(state);\n\n      if (!isRecording) return result;\n\n      const action = createAction(nameOrAction);\n      sendStateUpdate(action, get());\n\n      return result;\n    };\n\n    // Add devtools cleanup method\n    (api as typeof api & { devtools: { cleanup: () => void } }).devtools = {\n      cleanup: () => {\n        // Cleanup logic here\n      },\n    };\n\n    // Initialize the store and client\n    const initialState = fn(api.setState, get, api);\n\n    // Initialize client asynchronously\n    initializeClient().then(() => {\n      if (client) {\n        sendInit(initialState);\n      }\n    });\n\n    return initialState;\n  };\n\nexport const expoDevtools = expoDevtoolsImpl as unknown as ExpoDevtools;\n"]}