{"version":3,"file":"withDevtools.js","sourceRoot":"","sources":["../src/withDevtools.ts"],"names":[],"mappings":"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","sourcesContent":["import { getDevToolsPluginClientAsync } from \"expo/devtools\";\nimport type {\n\tStateCreator,\n\tStoreApi,\n\tStoreMutatorIdentifier,\n} from \"zustand/vanilla\";\n\n// Type definitions for DevTools client and messages\ninterface DevToolsClient {\n\tsendMessage: (type: string, data: unknown) => void;\n\taddMessageListener: (\n\t\ttype: string,\n\t\thandler: (message: DevToolsMessage) => void,\n\t) => { remove: () => void };\n}\n\ninterface DevToolsMessage {\n\ttype: \"ACTION\" | \"DISPATCH\";\n\taction?: string | { type: string; [key: string]: unknown };\n\tstate?: string;\n\tinstanceId?: string | number;\n}\n\n// Type definitions for Expo DevTools\ntype Cast<T, U> = T extends U ? T : U;\ntype Write<T, U> = Omit<T, keyof U> & U;\n\ntype TakeTwo<T> = T extends {\n\tlength: 0;\n}\n\t? [undefined, undefined]\n\t: T extends {\n\t\t\t\tlength: 1;\n\t\t\t}\n\t\t? [...args0: Cast<T, unknown[]>, arg1: undefined]\n\t\t: T extends {\n\t\t\t\t\tlength: 0 | 1;\n\t\t\t\t}\n\t\t\t? [...args0: Cast<T, unknown[]>, arg1: undefined]\n\t\t\t: T extends {\n\t\t\t\t\t\tlength: 2;\n\t\t\t\t\t}\n\t\t\t\t? T\n\t\t\t\t: T extends {\n\t\t\t\t\t\t\tlength: 1 | 2;\n\t\t\t\t\t\t}\n\t\t\t\t\t? T\n\t\t\t\t\t: T extends {\n\t\t\t\t\t\t\t\tlength: 0 | 1 | 2;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t? T\n\t\t\t\t\t\t: T extends [infer A0, infer A1, ...unknown[]]\n\t\t\t\t\t\t\t? [A0, A1]\n\t\t\t\t\t\t\t: T extends [infer A0, (infer A1)?, ...unknown[]]\n\t\t\t\t\t\t\t\t? [A0, A1?]\n\t\t\t\t\t\t\t\t: T extends [(infer A0)?, (infer A1)?, ...unknown[]]\n\t\t\t\t\t\t\t\t\t? [A0?, A1?]\n\t\t\t\t\t\t\t\t\t: never;\n\ntype WithExpoDevtools<S> = Write<S, StoreExpoDevtools<S>>;\n\ntype Action =\n\t| string\n\t| {\n\t\t\ttype: string;\n\t\t\t[x: string | number | symbol]: unknown;\n\t  };\n\ntype StoreExpoDevtools<S> = S extends {\n\tsetState: {\n\t\t(...args: infer Sa1): infer Sr1;\n\t\t(...args: infer Sa2): infer Sr2;\n\t};\n}\n\t? {\n\t\t\tsetState(...args: [...args: TakeTwo<Sa1>, action?: Action]): Sr1;\n\t\t\tsetState(...args: [...args: TakeTwo<Sa2>, action?: Action]): Sr2;\n\t\t\tdevtools: {\n\t\t\t\tcleanup: () => void;\n\t\t\t};\n\t\t}\n\t: never;\n\nexport interface ExpoDevtoolsOptions {\n\tname?: string;\n\tenabled?: boolean;\n\tanonymousActionType?: string;\n\tstore?: string;\n}\n\ntype ExpoDevtools = <\n\tT,\n\tMps extends [StoreMutatorIdentifier, unknown][] = [],\n\tMcs extends [StoreMutatorIdentifier, unknown][] = [],\n\tU = T,\n>(\n\tinitializer: StateCreator<\n\t\tT,\n\t\t[...Mps, [\"zustand/expo-devtools\", never]],\n\t\tMcs,\n\t\tU\n\t>,\n\tdevtoolsOptions?: ExpoDevtoolsOptions,\n) => StateCreator<T, Mps, [[\"zustand/expo-devtools\", never], ...Mcs]>;\n\ndeclare module \"zustand/vanilla\" {\n\tinterface StoreMutators<S, A> {\n\t\t\"zustand/expo-devtools\": WithExpoDevtools<S>;\n\t}\n}\n\ntype ExpoDevtoolsImpl = <T>(\n\tstoreInitializer: StateCreator<T, [], []>,\n\tdevtoolsOptions?: ExpoDevtoolsOptions,\n) => StateCreator<T, [], []>;\n\nexport type NamedSet<T> = WithExpoDevtools<StoreApi<T>>[\"setState\"];\n\n// Singleton client shared across all stores\nlet sharedClient: DevToolsClient | null = null;\nlet clientInitializationPromise: Promise<DevToolsClient | null> | null = null;\nlet clientInitialized = false;\n\n// Initialize the shared Expo devtools client (singleton)\nconst getOrCreateClient = async (): Promise<DevToolsClient | null> => {\n\t// If client is already initialized, return it\n\tif (sharedClient) {\n\t\treturn sharedClient;\n\t}\n\n\t// If initialization is in progress, wait for it\n\tif (clientInitializationPromise) {\n\t\treturn clientInitializationPromise;\n\t}\n\n\t// Start initialization\n\tclientInitializationPromise = (async () => {\n\t\ttry {\n\t\t\tsharedClient = await getDevToolsPluginClientAsync(\"zustand-expo-devtools\");\n\t\t\tif (!clientInitialized) {\n\t\t\t\tconsole.log(\"[Zustand DevTools] Client initialized\");\n\t\t\t\tclientInitialized = true;\n\t\t\t}\n\t\t\treturn sharedClient;\n\t\t} catch (error) {\n\t\t\tconsole.error(\"[Zustand DevTools] Failed to initialize client:\", error);\n\t\t\treturn null;\n\t\t}\n\t})();\n\n\treturn clientInitializationPromise;\n};\n\n// Internal function to reset client state (for testing purposes)\nexport const __resetDevToolsClient = () => {\n\tsharedClient = null;\n\tclientInitializationPromise = null;\n\tclientInitialized = false;\n};\n\nconst expoDevtoolsImpl: ExpoDevtoolsImpl =\n\t(fn, devtoolsOptions = {}) =>\n\t(set, get, api) => {\n\t\tconst { enabled, anonymousActionType, store, ...options } =\n\t\t\tdevtoolsOptions as ExpoDevtoolsOptions;\n\n\t\t// Check if devtools should be enabled (default to true)\n\t\tconst isEnabled = enabled ?? true;\n\t\tif (!isEnabled) {\n\t\t\treturn fn(set, get, api);\n\t\t}\n\n\t\t// State management\n\t\tlet isRecording = true;\n\t\tlet client: DevToolsClient | null = null;\n\t\tlet isInitializing = true;\n\n\t\t// Helper function to safely parse JSON strings\n\t\tconst safeJsonParse = (jsonString: string, errorContext: string) => {\n\t\t\ttry {\n\t\t\t\treturn JSON.parse(jsonString);\n\t\t\t} catch (e) {\n\t\t\t\tconsole.error(`[zustand devtools] Could not parse ${errorContext}`, e);\n\t\t\t\treturn null;\n\t\t\t}\n\t\t};\n\n\t\t// Handle ACTION type messages from devtools\n\t\tconst handleActionMessage = (message: DevToolsMessage) => {\n\t\t\tif (typeof message.action !== \"string\") return;\n\n\t\t\tconst action = safeJsonParse(message.action, \"action\");\n\t\t\tif (!action) return;\n\n\t\t\tif (action.type === \"__setState\") {\n\t\t\t\tsetStateFromDevtools(action.state);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst extendedApi = api as StoreApi<unknown> & {\n\t\t\t\tdispatchFromDevtools?: boolean;\n\t\t\t\tdispatch?: (action: Action) => void;\n\t\t\t};\n\n\t\t\tif (\n\t\t\t\textendedApi.dispatchFromDevtools &&\n\t\t\t\ttypeof extendedApi.dispatch === \"function\"\n\t\t\t) {\n\t\t\t\textendedApi.dispatch(action);\n\t\t\t}\n\t\t};\n\n\t\t// Handle DISPATCH type messages from devtools\n\t\tconst handleDispatchMessage = (message: DevToolsMessage) => {\n\t\t\tif (typeof message.action !== \"object\" || !message.action?.type) return;\n\n\t\t\tswitch (message.action.type) {\n\t\t\t\tcase \"RESET\":\n\t\t\t\t\tsetStateFromDevtools(initialState);\n\t\t\t\t\tsendInit(api.getState());\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"COMMIT\":\n\t\t\t\t\tif (typeof message.state === \"string\") {\n\t\t\t\t\t\tconst state = safeJsonParse(message.state, \"commit state\");\n\t\t\t\t\t\tif (state) {\n\t\t\t\t\t\t\tsendInit(state);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"ROLLBACK\":\n\t\t\t\t\tif (typeof message.state === \"string\") {\n\t\t\t\t\t\tconst state = safeJsonParse(message.state, \"rollback state\");\n\t\t\t\t\t\tif (state) {\n\t\t\t\t\t\t\tsetStateFromDevtools(state);\n\t\t\t\t\t\t\tsendInit(api.getState());\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"JUMP_TO_STATE\":\n\t\t\t\tcase \"JUMP_TO_ACTION\":\n\t\t\t\t\tif (typeof message.state === \"string\") {\n\t\t\t\t\t\tconst state = safeJsonParse(message.state, \"jump state\");\n\t\t\t\t\t\tif (state) {\n\t\t\t\t\t\t\tsetStateFromDevtools(state);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase \"PAUSE_RECORDING\":\n\t\t\t\t\tisRecording = !isRecording;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t};\n\n\t// Initialize the Expo devtools client\n\tconst initializeClient = async () => {\n\t\t// Get or create the shared client\n\t\tclient = await getOrCreateClient();\n\t\t\n\t\tif (!client) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Set up message listener for devtools actions\n\t\tclient.addMessageListener(\"dispatch\", (message: DevToolsMessage) => {\n\t\t\tif (\n\t\t\t\t!message.type &&\n\t\t\t\tmessage.instanceId !== (options.name || \"zustand-store\")\n\t\t\t)\n\t\t\t\treturn;\n\n\t\t\tswitch (message.type) {\n\t\t\t\tcase \"ACTION\":\n\t\t\t\t\thandleActionMessage(message);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"DISPATCH\":\n\t\t\t\t\thandleDispatchMessage(message);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t});\n\t};\n\n\t\t// Send init message to webui\n\t\tconst sendInit = (state: unknown) => {\n\t\t\tclient?.sendMessage(\"init\", {\n\t\t\t\tname: options.name,\n\t\t\t\tstate,\n\t\t\t});\n\t\t};\n\n\t\t// Send state update to webui\n\t\tconst sendStateUpdate = (action: Action, state: unknown) => {\n\t\t\tif (!isRecording) return;\n\n\t\t\tconst actionObj = typeof action === \"string\" ? { type: action } : action;\n\n\t\t\tclient?.sendMessage(\"state\", {\n\t\t\t\tname: options.name,\n\t\t\t\ttype: actionObj.type,\n\t\t\t\tstate,\n\t\t\t});\n\t\t};\n\n\t\t// Set state from devtools without triggering recording\n\t\tconst setStateFromDevtools = (state: unknown) => {\n\t\t\tconst originalIsRecording = isRecording;\n\t\t\tisRecording = false;\n\t\t\tset(state as Parameters<typeof set>[0]);\n\t\t\tisRecording = originalIsRecording;\n\t\t};\n\n\t// Create action object from nameOrAction parameter\n\tconst createAction = (\n\t\tnameOrAction?: Action,\n\t\treplace?: boolean,\n\t): { type: string } => {\n\t\tif (nameOrAction === undefined) {\n\t\t\t// If setState is called without an action name during store initialization,\n\t\t\t// it's likely from persist middleware rehydrating state\n\t\t\tif (isInitializing) {\n\t\t\t\treturn { type: \"@@REHYDRATE\" };\n\t\t\t}\n\t\t\t// Persist middleware calls setState with replace=true when rehydrating\n\t\t\t// This is a strong signal that it's a rehydration action\n\t\t\tif (replace === true) {\n\t\t\t\treturn { type: \"@@REHYDRATE\" };\n\t\t\t}\n\t\t\treturn { type: anonymousActionType || \"anonymous\" };\n\t\t}\n\n\t\tif (typeof nameOrAction === \"string\") {\n\t\t\treturn { type: nameOrAction };\n\t\t}\n\n\t\treturn nameOrAction;\n\t};\n\n\t// Override setState to capture actions and send to devtools\n\tconst originalSetState = api.setState;\n\tapi.setState = (\n\t\tstate: Parameters<typeof originalSetState>[0],\n\t\treplace?: boolean,\n\t\tnameOrAction?: Action,\n\t) => {\n\t\tconst result =\n\t\t\treplace === true\n\t\t\t\t? originalSetState(state, true)\n\t\t\t\t: originalSetState(state);\n\n\t\tif (!isRecording) return result;\n\n\t\tconst action = createAction(nameOrAction, replace);\n\t\tsendStateUpdate(action, get());\n\n\t\treturn result;\n\t};\n\n\t\t// Add devtools cleanup method\n\t\t(api as typeof api & { devtools: { cleanup: () => void } }).devtools = {\n\t\t\tcleanup: () => {\n\t\t\t\t// Cleanup logic here\n\t\t\t},\n\t\t};\n\n\t\t// Initialize the store and client\n\t\tconst initialState = fn(api.setState, get, api);\n\t\t\n\t\t// Mark initialization as complete\n\t\t// Any setState calls after this point are not from persist rehydration\n\t\tisInitializing = false;\n\n\t\t// Initialize client asynchronously\n\t\tinitializeClient().then(() => {\n\t\t\tif (client) {\n\t\t\t\tsendInit(initialState);\n\t\t\t}\n\t\t});\n\n\t\treturn initialState;\n\t};\n\nexport const devtools = expoDevtoolsImpl as unknown as ExpoDevtools;\n"]}